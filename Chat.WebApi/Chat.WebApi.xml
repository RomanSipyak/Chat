<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chat.WebApi</name>
    </assembly>
    <members>
        <member name="M:Chat.WebApi.Controllers.AccountController.RegisterUser(Chat.Contracts.Dtos.User.UserRegisterDto)">
            <summary>
            Registers new user
            </summary>
            <param name="registerDto">Instance of UserRegisterDto type with user`s info</param>
            <returns>An ActionResult of type UserDto</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.AccountController.LoginUser(Chat.Contracts.Dtos.User.UserLoginDto)">
            <summary>
            Login method for user
            </summary>
            <param name="userLoginDto">Instance of UserLoginDto type with user`s credentials</param>
            <returns>An ActionResult of type UserLogedDto with access token and user`s info</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.ChatController.ConnectToChat(Chat.Contracts.Dtos.Chat.ConnectChatDto)">
            <summary>
            This method for add authenticated user to public chat 
            </summary>
            <param name="connectChatDto">Consist of Title and Id Chat. Id is required parameter</param>
            <returns>Status</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.ChatController.GetAllChatsForUser">
            <summary>
            Get All chats for User
            </summary>
            <returns>Collection of GetChatDto</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.SendMessageToChat(Chat.Contracts.Dtos.Message.SendMessageToChatDto)">
            <summary>
            Send Message to chat 
            </summary>
            <param name="sendMessageDto">Contains all information about chat where we want to send our message</param>
            <returns>Return status about condition of sendToChatAction</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.SendMessageToUser(Chat.Contracts.Dtos.Message.SendMessageToUserDto)">
            <summary>
            Send Message to user 
            </summary>
            <param name="sendMessageToUserDto">Contains all information about where we want to send and hom we want to send our message</param>
            <returns>Return status about condition of sendToUserAction</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.DeleteMessage(Chat.Contracts.Dtos.Message.DeleteMessageDto)">
            <summary>
            Delete message If It is possible
            </summary>
            <param name="deleteMessageDto">Contains Id and options for deleteing our message</param>
            <returns>Return status about condition of deleteAction.</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.UpdateMessage(Chat.Contracts.Dtos.Message.UpdateMessageDto)">
            <summary>
            Update message if it is possible
            </summary>
            <param name="updateMessageDto">This Dto contains All Information about messsage that we want to update</param>
            <returns>Return status 200 if your message is updated</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.ReplyForMessage(Chat.Contracts.Dtos.Message.ReplyMessageDto)">
            <summary>
            Reply for message chat.
            If you set ReplyForSenderInPrivateChat = true;
            We try to find this chat by ReplyChatId. 
            If this chat exists and it is not public and you are not attached for this chat or reciverUser 
            will not be attached we will be try to find default private chat for you and your reciever and send reply there. 
            Another way we will be create this chat attache thre you and your reciever and send message there. 
            If Chat not exist we will try find default chat and make the same action that describe above.
            If you set ReplyForSenderInPrivateChat = false;
            We try to find this chat by ReplyChatId. 
            If this chat exists we send a reply message for here if this message that we want to be replied attached for this chat and you are attached also for this chat.
            </summary>
            <param name="replyMessageDto">Dto for reply message</param>
            <returns>ActionResult with staus 200 if all good</returns>
        </member>
        <member name="M:Chat.WebApi.Controllers.MessagesController.GetMessagesForChat(System.Int32,Chat.Contracts.Dtos.PaginationFilterDto)">
            <summary>
            Get all messages for chat 
            </summary>
            <param name="ChatId">This is Id Chat with messages</param>
            <param name="pagination">This is filter with count of elements and number of page</param>
            <returns>GetMessageDto that contain information about our messages</returns>
        </member>
    </members>
</doc>
