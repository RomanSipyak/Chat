// <auto-generated />
using System;
using Chat.Infrastructure.AppContext.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.Infrastructure.AppContext.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200609123419_AddSeeds")]
    partial class AddSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Contracts.Entity.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DefaultChat")
                        .HasColumnType("bit");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultChat = false,
                            Public = true,
                            Title = "Chat1"
                        },
                        new
                        {
                            Id = 2,
                            DefaultChat = true,
                            Public = false,
                            Title = "Chat2"
                        },
                        new
                        {
                            Id = 3,
                            DefaultChat = false,
                            Public = true,
                            Title = "Chat3"
                        });
                });

            modelBuilder.Entity("Chat.Contracts.Entity.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            DateSend = new DateTime(2020, 6, 9, 12, 34, 14, 304, DateTimeKind.Utc).AddTicks(6547),
                            MessageId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            DateSend = new DateTime(2020, 6, 10, 12, 34, 14, 304, DateTimeKind.Utc).AddTicks(9539),
                            MessageId = 2
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            DateSend = new DateTime(2020, 6, 9, 12, 44, 14, 304, DateTimeKind.Utc).AddTicks(9946),
                            MessageId = 3
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 2,
                            DateSend = new DateTime(2020, 6, 9, 12, 44, 14, 305, DateTimeKind.Utc).AddTicks(14),
                            MessageId = 4
                        },
                        new
                        {
                            Id = 5,
                            ChatId = 2,
                            DateSend = new DateTime(2020, 6, 9, 12, 46, 14, 305, DateTimeKind.Utc).AddTicks(23),
                            MessageId = 5
                        },
                        new
                        {
                            Id = 6,
                            ChatId = 2,
                            DateSend = new DateTime(2020, 6, 9, 12, 49, 14, 305, DateTimeKind.Utc).AddTicks(30),
                            MessageId = 6
                        },
                        new
                        {
                            Id = 7,
                            ChatId = 2,
                            DateSend = new DateTime(2020, 6, 9, 12, 54, 14, 305, DateTimeKind.Utc).AddTicks(36),
                            MessageId = 7
                        });
                });

            modelBuilder.Entity("Chat.Contracts.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeletedForAll")
                        .HasColumnType("bit");

                    b.Property<bool>("DeletedForSender")
                        .HasColumnType("bit");

                    b.Property<string>("MessageData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParrentMessageId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParrentMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat1 user1",
                            SenderId = "1"
                        },
                        new
                        {
                            Id = 2,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat1 user2",
                            SenderId = "2"
                        },
                        new
                        {
                            Id = 3,
                            DeletedForAll = false,
                            DeletedForSender = true,
                            MessageData = "For chat1 user3",
                            ParrentMessageId = 2,
                            SenderId = "3"
                        },
                        new
                        {
                            Id = 4,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat2 user1",
                            SenderId = "1"
                        },
                        new
                        {
                            Id = 5,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat2 user2",
                            SenderId = "2"
                        },
                        new
                        {
                            Id = 6,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat2 user1",
                            ParrentMessageId = 4,
                            SenderId = "2"
                        },
                        new
                        {
                            Id = 7,
                            DeletedForAll = false,
                            DeletedForSender = false,
                            MessageData = "For chat2 user1",
                            ParrentMessageId = 6,
                            SenderId = "1"
                        });
                });

            modelBuilder.Entity("Chat.Contracts.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "360829bd-6e48-412c-8d27-8c60bea7cca6",
                            Email = "user1@gmail.fake",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.FAKE",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUqt+LdVK2AjnKZJadd43pqLSM41OHxC55iVntVgCNkftdJm4bL41xeaJ9Vghck6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b6d9120-da9f-4d59-9785-4c3fad5906e5",
                            Email = "user2@gmail.fake",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.FAKE",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAELR+Uv3leJorsbmw+JYsvF6z4DaX+/r8cFlxgldkvVR8dpsb1RWb05f/ks4cKUpxdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "258286ee-a951-4e17-8b56-6ee38f6c50de",
                            Email = "user3@gmail.fake",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.FAKE",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCeldQQQn+clWh4fAEzSEgH7Bg9lAOxes5EQ7QEp7/XOMh4+2YfpRMUUGAf02qIRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba91eb43-0099-47fd-87aa-f8a41eb85a1c",
                            Email = "user4@gmail.fake",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.FAKE",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEFbkTH5NqyTCHRYYZ7MHJIT44CqL6f9q6kWBL+WVxa2Ild6UwQlBSw3jnjUC+vUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        });
                });

            modelBuilder.Entity("Chat.Contracts.Entity.UserChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ChatId = 2,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2c087181-7837-4f6e-b233-7d0bb9a517fa",
                            ConcurrencyStamp = "553d49f4-2061-41b1-abeb-4420699d7696",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "2c087181-7837-4f6e-b233-7d0bb9a517fa"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2c087181-7837-4f6e-b233-7d0bb9a517fa"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2c087181-7837-4f6e-b233-7d0bb9a517fa"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2c087181-7837-4f6e-b233-7d0bb9a517fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Chat.Contracts.Entity.ChatMessage", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Contracts.Entity.Message", "Message")
                        .WithMany("ChatMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chat.Contracts.Entity.Message", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.Message", "ParrentMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ParrentMessageId");

                    b.HasOne("Chat.Contracts.Entity.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Chat.Contracts.Entity.UserChat", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Contracts.Entity.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.Contracts.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chat.Contracts.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
